field blah: Int

domain Foo {
  function bar0(): Int
  function bar1(a: Int): Int
  function bar2(a: Int, b: Int): Int
  function bar3(a: Int, b: Int, c: Int): Int

  axiom etc { true }
}

function baz0(): Int { 0 }
function baz1(a: Int): Int { true ? 0 : 1 }
function baz2(a: Int, b: Int): Int { baz0() }
function baz3(a: Int, b: Int, c: Int): Int { baz2(1, 2) }

predicate pred0() { false }
predicate pred1(a: Int) { true && (a > 2) }
predicate pred2(a: Int, b: Int) { forall i: Int :: {pred1(i)} pred1(i) }
predicate pred3(a: Int, b: Int, c: Int) { exists i: Int :: i == 0 }

method meth0() {}
method meth1(a: Int) returns (b: Int)
  requires a > 0
  ensures b > 1
{
  var c: Int := 1
  var d: Bool
  b := a + 1
}
method meth2(a: Int, b: Int) returns (c: Int, d: Int)
  requires a > 0
{
  c := meth1(a)
  d := b
}
method meth3() {
  var c: Int
  var d: Int
  c, d := meth2(1, 2)

  if (c > 2)
  {
    d := c + 1
  }

  if (d > 4)
  {
    c := d
  }
  else
  {
    c := d - 1
  }

  while (c > 0)
    invariant (c <= d)
  {
    c := c - 1
  }
}
